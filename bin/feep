#!/usr/bin/env ruby

require 'optparse'

require_relative '../lib/feep'
require_relative '../lib/feep/version'

def parse_options
  options = {
    :freq_or_note => '440.000',
    :scale => nil,
    :waveform => 'sine',
    :volume => 0.5,
    :duration => 100,
    :save => false,
    :loud => false,
    :notext => false,
    :usage => nil
  }

  optparse = OptionParser.new do |opts|
    opts.banner = "Play sounds on the command line\n"
    opts.banner += "usage: feep [-f, -n, --frequency, --note FREQUENCY|NOTE_NAME] [-s, --scale SCALE_ID] [-sd, --degrees NUMBER_OF_SCALE_DEGREES] [-w, --waveform WAVEFORM_ID] [-a, --amplitude MAX_AMPLITUDE] [-d, --duration DURATION] [--save] [--loud] [--notext]\n\n"

    opts.on('-f', '--frequency FREQUENCY', 'One or more frequencies or to play at once, e.g. 440 or 220,440,880') do |frequency|
      options[:freq_or_note] = frequency
    end

    opts.on('-n', '--note NOTE_NAME', 'One or more note names to play at once, e.g. A4 or A4,C5,E5') do |note|
      options[:freq_or_note] = note
    end

    opts.on('-s', '--scale SCALE_ID', 'Name of a scale to play') do |scale_id|
      options[:scale] = scale_id
    end

    opts.on('--degrees SCALE_DEGREES', 'Number of degrees of the scale to play') do |degrees|
      options[:degrees] = degrees
    end

    opts.on('-w', '--waveform WAVEFORM', 'Waveform type to use for the sound') do |waveform|
      options[:waveform] = waveform
    end

    opts.on('-a', '--amplitude MAX_AMPLITUDE', 'Amplitude/volume (0.0 - 1.0) to play the sound(s) at') do |amplitude|
      options[:volume] = amplitude.to_f
    end

    opts.on('-d', '--duration DURATION', 'Duration in ms to play the sound(s)') do |duration|
      options[:duration] = duration.to_i
    end

    opts.on('--save', 'Save the resulting WAV file in the current directory') do
      options[:save] = true
    end

    opts.on('--loud', 'Displays information about note(s) being played') do
      options[:loud] = true
    end

    opts.on('--notext', 'No "Feeep!" text on play') do
      options[:notext] = true
    end

    opts.on('-v', '--version', 'Display version number and exit') do
      puts "feep #{Feep::VERSION}"
      exit
    end

    opts.on('-h', '--help', 'Display this screen and exit') do
      puts opts
      exit
    end
  end

  options[:usage] = optparse.to_s
  optparse.parse!()

  return options
end

def print_error(error)
  case error
  when OptionParser::InvalidOption
    puts "#{$PROGRAM_NAME}: illegal option #{error.args.join(' ')}"
  else
    puts "An unexpected error occurred while running #{$PROGRAM_NAME}:"
    puts "  #{error}\n"
  end
end

begin
  options = parse_options

  Feep::Base.new(options)
rescue => error
  print_error(error)
  exit(false)
end

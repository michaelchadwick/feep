# bin/feep
#!/usr/bin/env ruby

require 'pry'
require 'optparse'
require_relative '../lib/feep'

def parse_options
  options = {:freq_or_note => '440.000', :scale => nil, :waveform => 'sine', :volume => 0.5, :duration => 100, :save => false, :loud => false, :usage => nil}

  optparse = OptionParser.new do |opts|
    opts.banner = 'usage: feep [-f, -n, --freq-or-note FREQUENCY|NOTE_NAME] [-s, --scale SCALE_ID] [-d, --degrees NUMBER_OF_DEGREES] [-w, --waveform WAVEFORM] [-a, --amplitude MAX_AMPLITUDE] [-d, --duration DURATION] [-save] [-loud]'

    opts.on('-f', '-n', '--freq-or-note FREQUENCY|NOTE_NAME', 'One or more frequencies or note names to play at once, e.g. 440 or A4 or 220,440,880') do |f_or_n|
      options[:freq_or_note] = f_or_n
    end
    
    opts.on('-s', '--scale SCALE_ID', 'Name of a scale to play') do |s|
      options[:scale] = s
    end
    
    opts.on('-d', '--degrees NUMBER_OF_DEGREES', 'Number of degrees of the scale to play') do |d|
      options[:degrees] = d
    end
    
    opts.on('-w', '--wave WAVEFORM', 'Waveform type to use for the sound') do |w|
      options[:waveform] = w
    end

    opts.on('-a', '--amplitude MAX_AMPLITUDE', 'Amplitude/volume (0.0 - 1.0) to play the sound(s) at') do |a|
      options[:volume] = a.to_f
    end
    
    opts.on('-d', '--duration DURATION', 'Duration in ms to play the sound(s)') do |d|
      options[:duration] = d.to_i
    end

    opts.on('--save', 'Save the resulting WAV file in the current directory') do
      options[:save] = true
    end
    
    opts.on('--loud', 'Displays information about note(s) being played') do
      options[:loud] = true
    end

    opts.on('-v', '--version', 'Display version number and exit') do
      puts "#{$PROGRAM_NAME} #{Feep::VERSION}"
      exit
    end

    opts.on('-h', '--help', 'Display this screen and exit') do
      puts opts
      exit
    end
  end

  options[:usage] = optparse.to_s
  optparse.parse!()

  return options
end

def print_error(error)
  case error
  when OptionParser::InvalidOption
    puts "#{$PROGRAM_NAME}: illegal option #{error.args.join(' ')}"
  else
    puts "An unexpected error occurred while running #{$PROGRAM_NAME}:"
    puts "  #{error}\n"
  end
end

begin
  options = parse_options

  Feep::Base.new(options)
rescue => error
  print_error(error)
  exit(false)
end
